---
title: "Strawberries Dataset EDA"
author: Suheng Yao
date: 2024 Sept 30
format: pdf
editor: visual
---

## Read and Explore the Data

```{r}
#| label: load libraries and set options
#| warning: false
#| message: false
#| 

library(knitr)  
library(kableExtra)
library(tidyverse)
library(ggplot2)
library(tidyr)


```

We first read in the data and have an overview of the data:

```{r}
#| label: read data - glimpse
#| message: false 

strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE)

glimpse(strawberry)
```

We got 12699 rows and 21 columns.

## Data Cleaning

We can check for NA values and the columns with exact same values:
```{r}
# Identify columns with only NA values and remove them
na_num <- colSums(is.na(strawberry))
print(na_num)
strawberry <- strawberry[, na_num < nrow(strawberry)]
```
Since Week Ending, Zip Code, Region and Watershed contain only NA values, those four columns have to be removed.

```{r}
# Identify columns with exact same values and remove them
col_same <- sapply(strawberry, function(x) length(unique(x)) == 1)
print(col_same)
strawberry <- strawberry[, !col_same]
```
Since watershed_code and Commodity are the columns with the same values, they also have to be removed.

```{r}
glimpse(strawberry)
```
Now, there are 12669 rows and 15 variables.

Since the "State ANSI", "County ANSI", "Value" and "CV (%)" are all numeric values, but they were treated as character values in this data, it is necessary to convert them into numeric value:
```{r, warning=FALSE}
# convert two columns to numeric
strawberry$`State ANSI` <- as.numeric(strawberry$`State ANSI`)
strawberry$`County ANSI` <- as.numeric(strawberry$`County ANSI`)
strawberry$Value <- as.numeric(strawberry$Value)
strawberry$`CV (%)` <- as.numeric(strawberry$`CV (%)`)
```

Since the "Geo Level", "Ag District", "State" and "County" are all good indicators of the group, it is better to convert them into factor data type:
```{r}
# convert four columns to factor type
cols_convert <- c("Geo Level", "State", "Ag District")
strawberry[cols_convert] <- lapply(strawberry[cols_convert], as.factor)
```


### Examine The Structure of the Data

```{r}
#| label: explore organization 1 


## Check if every row is associated with a state

state_all <- strawberry |> distinct(State)

state_all1 <- strawberry |> group_by(State) |> count()

if(sum(state_all1$n) == dim(strawberry)[1]){print("Yes every row in the data is associated with a state.")}

rm(state_all, state_all1)

```

### Separate Composite Columns

Since variable "Data Item" contains too much information, we plan to separate the information in this column into a few new columns:
```{r}
unique(strawberry$Operation2)
```

```{r}
#| label: split Data Item

# Step1: Split the Data Item variable first based on commas
strawberry <- strawberry %>%
  separate(`Data Item`, into = c("Fruit", "Category1", "Category2"), 
           sep = ",", fill = "right", extra = "merge")

# Step2: Split the column based on hyphen
strawberry <- strawberry %>%
  separate(Category1, into = c("Type", "Info1"), 
           sep = "-", fill = "right", extra = "merge") %>%
  separate(Category2, into = c("Type2", "Info2"),
            sep = "-", fill = "right", extra = "merge")

# Step3: Separate Info1 and Info2 by measurement information
strawberry <- strawberry %>%
  separate(Type, into = c("Operation1", "Measurement1"), sep = "MEASURED IN ", fill = "right", extra = "merge") %>%
  separate(Type2, into = c("Operation2", "Measurement2"), sep = "MEASURED IN ", fill = "right", extra = "merge")

# Trim the leading space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
```
The "Data Item" column has been splitted into "Fruit", "Category", "Item" and "Metric".

### Examine the Fruit Column -- Find Hidden Sub-columns

```{r}

unique(strawberry$Fruit)

## generate a list of rows with the production and price information

spr <- which((strawberry$Fruit=="STRAWBERRIES - PRODUCTION") | (strawberry$Fruit=="STRAWBERRIES - PRICE RECEIVED"))


strw_prod_price <- strawberry |> slice(spr)


## this has the census data, too

strw_chem <- strawberry |> slice(-1*spr)  ## too soon


  
```
```{r}
unique(strawberry$Category)
unique(strawberry$Item)
unique(strawberry$Metric)
```

## now examine the rest of the columns

Which ones need to be split?

## split sales and chemicals into two dataframes

(do this last after separating rows into separate data frames) (THEN rename the columns to correspond the analysis being done with the data frames)

```{r}
#|label: split srawberry into census and survey pieces

strw_b_sales <- strawberry |> filter(Program == "CENSUS")

strw_b_chem <- strawberry |> filter(Program == "SURVEY")

nrow(strawberry) == (nrow(strw_b_chem) + nrow(strw_b_sales))

## Move marketing-related rows in strw_b_chem 
## to strw_b_sales


```

## plots

```{r}
#|label: plot 1

plot1_data <- strawberry |> 
  select(c(Year, State, Category, Value)) |> 
  filter((Year == 2021) & (Category == "ORGANIC - OPERATIONS WITH SALES"))

plot1_data$Value <- as.numeric(plot1_data$Value)

plot1_data <- plot1_data |> arrange(desc(Value))

ggplot(plot1_data, aes(x=reorder(State, -Value), y=Value)) + 
  geom_bar(stat = "identity") + 
  theme(axis.text.x=element_text(angle=45,hjust=1)) +
  labs(x = "States", y = "Count",
title ="Number of Organic Strawberry operations with Sales in 2021")


```

```{r}
## plot 2

plot2_data <- strawberry |> 
  select(c(Year, State, Category, Item, Value)) |> 
  filter((Year == 2021) & 
           (Category == "ORGANIC - SALES") & 
           (Item == "MEASURED IN $") & 
           (Value != "(D)"))


plot2_data$Value <- as.numeric(gsub(",", "", plot2_data$Value))

plot2_data <- plot1_data |> arrange(desc(Value))

ggplot(plot2_data, aes(x=reorder(State, -Value), y=Value)) + 
  geom_bar(stat = "identity") + 
  theme(axis.text.x=element_text(angle=45,hjust=1)) +
  labs(x = "States", y = "Sales",
title ="Organic Strawberry Sales ($) in 2021")


```
